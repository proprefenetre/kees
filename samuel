import argparse

# from pyquery import PyQuery as pq
from bs4 import BeautifulSoup
import requests
from requests.exceptions import HTTPError, ConnectionError, SSLError
from urllib.parse import quote

DICT_URL = 'http://www.mijnwoordenboek.nl/vertaal/{source}/{target}/{word}'
LANGUAGES = ['nl', 'NL', 'en', 'EN', 'de', 'DE', 'fr', 'FR', 'es', 'ES']


def _get_response(url):
    try:
        return requests.get(url)
    except (HTTPError, ConnectionError, SSLError) as e:
        raise e


def _get_elements(args):
    response = _get_response(DICT_URL.format_map(args)).text
    # html = pq(response)
    return BeautifulSoup(response, 'lxml')


def _parse_elements(args):
    target_div = '.span8 > div:nth-of-type(1)'
    font_style = 'color:navy;font-size:10pt'

    soup = _get_elements(args)
    div = soup.select(target_div + '> font')
    return [elem.text.split(',') for elem in div if font_style in elem['style']]
    # tables = soup.select(target_div + '> table')
    # other_translations = []
    # for t in tables:
    #     if t.get('border', None) is not None:
    #         for td in t('td'):
    #             if td.get('style', None) is not None:
    #                 other_translations.extend([w.strip() for w in
    #                                            td.text.split(';')])


def emf(args):
    args['word'] = quote(' '.join(args['word']).strip())
    trs = _parse_elements(args)
    if args['num_translations'] > 1:
        return trs[:args['num_translations']+1]
    else:
        return trs[0]


def get_parser():
    parser = argparse.ArgumentParser(description='find the English \
                                     translation of a word')
    parser.add_argument('word', metavar='WORD', type=str, nargs='+',
                        help='word to be translated')
    parser.add_argument('-s', '--source', type=str, default='NL',
                        help='source language (default: NL)')
    parser.add_argument('-t', '--target', type=str, default='EN',
                        help='source language (default: EN)')
    parser.add_argument('-n', '--num-translations', type=int, default=1,
                        help='number of translations (default: 1)')
    return parser


def run():
    p = get_parser()
    args = vars(p.parse_args())
    if all([args['source'] in LANGUAGES, args['target'] in LANGUAGES]):
        print(emf(args))

if __name__ == "__main__":
    run()
